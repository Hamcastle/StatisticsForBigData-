plot(eyeMovements_4.GLM,which=i)
dev.off()
# As we can see that we have a considerable change in the
# coefficiens and a decrease in the AIC values
# hence the rows were potential influential observation.
# THUS now we will work on eyeMovements_4
##======================DIVIDING THE TRAINING AND TEST SET======================
# Now the task is to divide the data set into training set and the test set
# which is done by the function defined previously in Cleaning.R
# Training 80% and 20% to test
# Function: (splitdata) Splitting the dataset into training and test
#           set
# Input: The data set which is to be divided and the seed value
# Output: List of Training set as well as the test set. With training
#         being 80% of the total data set
splitdata <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)*.80))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
# Save the List from the splitdata Function to wholeData4 with seed 123
wholeData4 <- splitdata(eyeMovements_4,123)
# Extracting the Training set from the wholeData4
eyeTraining4 <- wholeData4$trainset
# Extracting the Test set from the wholeData4
eyeTest4 <- wholeData4$testset
# Writing the Training and Test into .csv Files
write.csv(eyeTraining4,file = "TrainingEye_4.csv",row.names = FALSE)
write.csv(eyeTest4,file = "TestEye_4.csv",row.names = FALSE)
##======================FIT THE GLM ON THE TRAINING SET======================
# Function: glm
# Input: The glm function will take the training dataframe.
# Output: The model after fitting the glm model using the
#         family = binomial()
#         data = eyeTraining4
#         Condition as Response variable
#         Duration.of.Fixation as Predictable variable
#         Horizontal.Dispersion as Predictable variable
#         Vertical.Dispersion as Predictable variable
#         Velocity.Vertical as Predictable variable
training.GLM <- glm(Condition ~ Duration.of.Fixation +
Horizontal.Dispersion +
Vertical.Dispersion +
Velocity.Horizontal +
Velocity.Vertical,data = eyeTraining4,family = binomial())
# Coefficients
training.GLM$coefficients
# Residuals
training.GLM$residuals
# Fitted Values
training.GLM$fitted.values
# Effects
training.GLM$effects
# Saving the training GLM object to training.GLM.Summary
training.GLM.Summary <- summary(training.GLM)
# Extracting the AIC value of the model
training.GLM$aic
# Plot the training.glm object
plot(training.GLM)
predict_training_glm <- round(predict(training.GLM,eyeTest4,type = "response"))
str(predict_training_glm)
predict_training_glm_continous <- predict(training.GLM,eyeTest4,type = "response")
predict_training_glm_continous
#============================GENERATING THE CONFUSION MATRIX===============================
# Generate the confusion matrix
cMatrix <- confusion.matrix(eyeTest4$Condition,predict_training_glm,threshold = .95)
cMatrix
# Getting the accureacy
cAccuracy <- accuracy(eyeTest4$Condition,predict_training_glm,threshold = .95)
cAccuracy$AUC
#============================CREATE THE ROCR CURVE===============================
#Create ROCR prediction and performance objects
pred_training <- prediction(predict_training_glm_continous,eyeTest4$Condition)
pred_training
performance_training <- performance(pred_training,"tpr","fpr")
performance_training
# x and y values of the model
x <- unlist(performance_training@x.values)
y <- unlist(performance_training@y.values)
plot(performance_training)
lines(x,y)
#============================FITTING THE LASSO TO THE FULL MODEL===============================
# Fit the lasso model for the logistic regression using the file
# saved in the folder.
source("LSA.R.txt")
training.GLM.LASSO <- lsa(training.GLM)
training.GLM.LASSO$beta.aic
training.GLM.LASSO
training.GLM.LASSO$beta.aic
training.GLM.LASSO$beta.aic
training.lasso <- glm(Condition ~ Duration.of.Fixation+
Vertical.Dispersion,
data = eyeTraining4,family = binomial())
summary(training.lasso)
training.lasso.Summary <- summary(training.lasso)
training.lasso.Summary$aic
training.GLM$aic
rm(training.lasso)
training.lasso.glm <- glm(Condition ~ Duration.of.Fixation+
Vertical.Dispersion,
data = eyeTraining4,family = binomial())
training.lasso.Summary <- summary(training.lasso.glm)
training.lasso.Summary$aic
predict_lasso_training_glm <- round(predict(training.lasso.glm,eyeTest4,type = "response"))
str(predict_lasso_training_glm)
predict_lasso_training_glm_continous <- predict(training.lasso.glm,eyeTest4,type = "response")
predict_lasso_training_glm_continous
cMatrixLasso <- confusion.matrix(eyeTest4$Condition,predict_lasso_training_glm,threshold = .95)
cMatrixLasso
cMatrix
cMatrixLasso <- confusion.matrix(eyeTest4$Condition,predict_lasso_training_glm_continous,threshold = .95)
cMatrixLasso
predict_lasso_training_glm
cMatrixLasso <- confusion.matrix(eyeTest4$Condition,predict_lasso_training_glm,threshold = .95)
cMatrixLasso
cAccuracyLasso <- accuracy(eyeTest4$Condition,predict_lasso_training_glm,threshold = .95)
cAccuracy$AUC
cAccuracy$AUC
cAccuracyLasso$AUC
pred_lasso_training
pred_lasso_training <- prediction(predict_lasso_training_glm_continous,eyeTest4$Condition)
pred_lasso_training
performance_lasso_training <- performance(pred_lasso_training,"tpr","fpr")
performance_lasso_training
x.lasso <- unlist(performance_lasso_training@x.values)
y.lasso <- unlist(performance_lasso_training@y.values)
plot(performance_lasso_training)
lines(x,y)
lines(x,y,col = "red")
plot(performance_training)
lines(x,y,col = "yellow")
plot(performance_lasso_training)
lines(x,y,col = "red")
str(predict_lasso_training_glm)
predict_lasso_training_glm <- round(predict(training.lasso.glm,eyeTest4,type = "response"))
str(predict_lasso_training_glm)
predict_lasso_training_glm_continous <- predict(training.lasso.glm,eyeTest4,type = "response")
predict_lasso_training_glm_continous
cMatrixLasso <- confusion.matrix(eyeTest4$Condition,predict_lasso_training_glm,threshold = .95)
cMatrixLasso
# Getting the accureacy
cAccuracyLasso <- accuracy(eyeTest4$Condition,predict_lasso_training_glm,threshold = .95)
cAccuracyLasso$AUC
aicValue <- c()
aicValue
# Creating an empty character vector which will be used to save AUC values
aucValue <- c()
aucValue
# Creating an empty character vector which will be used to save
# AIC values from lasso model
aicValueLasso <- c()
aicValueLasso
# Creating an empty character vector which will be used to save
# AUC values from lasso model
aucValueLasso <- c()
aucValueLasso
head(aicValue)
head(aucValue)
head(aicValueLasso)
head(aucValueLasso)
for(i in 200:1000){
splitdataWORK <- function(dataframe, seed=NULL){
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)*.80))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
# Entire Dataset
push1 <- splitdataWORK(eyeMovements_4,i)
# Extracting the Training Data
pushTraining <- push1$trainset
# extracting the Test Data
pushTest <- push1$testset
# Implementing the glm on the Training set
pushTraining.glm <- glm(Condition ~ Duration.of.Fixation +
Horizontal.Dispersion +
Vertical.Dispersion +
Velocity.Horizontal +
Velocity.Vertical,data = pushTraining,family = binomial())
# Saving the AIC value of each model into aicValue
aicValue <- rbind(aicValue,pushTraining.glm$aic)
# Predicting the values in the test data
predict_training_glm <- round(predict(training.GLM,
eyeTest4,
type = "response"))
# Measuring the accuracy.
cAccuracy <- accuracy(eyeTest4$Condition,
predict_training_glm,
threshold = .95)
# Saving the AUC value from each model into aucValue
aucValue <- rbind(aucValue,cAccuracy$AUC)
#===========================LASSO MODEL=============================
pushTraining.glm.lasso <- glm(Condition ~ Duration.of.Fixation+
Vertical.Dispersion,
data = pushTraining,family = binomial())
# Saving the AIC value of each model into aicValueLasso
aicValueLasso <- rbind(aicValueLasso,pushTraining.glm.lasso$aic)
# Predicting the values in the test data from the lasso model
predict_lasso_training_glm <- round(predict(pushTraining.glm.lasso,
eyeTest4,
type = "response"))
# Getting the accureacy
cAccuracyLasso <- accuracy(eyeTest4$Condition,pushTraining.glm.lasso,threshold = .95)
aucValueLasso <- (aucValueLasso,cAccuracyLasso$AUC)
}
for(i in 200:1000){
splitdataWORK <- function(dataframe, seed=NULL){
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)*.80))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
# Entire Dataset
push1 <- splitdataWORK(eyeMovements_4,i)
# Extracting the Training Data
pushTraining <- push1$trainset
# extracting the Test Data
pushTest <- push1$testset
# Implementing the glm on the Training set
pushTraining.glm <- glm(Condition ~ Duration.of.Fixation +
Horizontal.Dispersion +
Vertical.Dispersion +
Velocity.Horizontal +
Velocity.Vertical,data = pushTraining,family = binomial())
# Saving the AIC value of each model into aicValue
aicValue <- rbind(aicValue,pushTraining.glm$aic)
# Predicting the values in the test data
predict_training_glm <- round(predict(training.GLM,
eyeTest4,
type = "response"))
# Measuring the accuracy.
cAccuracy <- accuracy(eyeTest4$Condition,
predict_training_glm,
threshold = .95)
# Saving the AUC value from each model into aucValue
aucValue <- rbind(aucValue,cAccuracy$AUC)
#===========================LASSO MODEL=============================
pushTraining.glm.lasso <- glm(Condition ~ Duration.of.Fixation+
Vertical.Dispersion,
data = pushTraining,family = binomial())
# Saving the AIC value of each model into aicValueLasso
aicValueLasso <- rbind(aicValueLasso,pushTraining.glm.lasso$aic)
# Predicting the values in the test data from the lasso model
predict_lasso_training_glm <- round(predict(pushTraining.glm.lasso,
eyeTest4,
type = "response"))
# Getting the accureacy
cAccuracyLasso <- accuracy(eyeTest4$Condition,
pushTraining.glm.lasso,
threshold = .95)
aucValueLasso <- rbind(aucValueLasso,cAccuracyLasso$AUC)
}
cAccuracyLasso$AUC
for(i in 200:1000){
splitdataWORK <- function(dataframe, seed=NULL){
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)*.80))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
# Entire Dataset
push1 <- splitdataWORK(eyeMovements_4,i)
# Extracting the Training Data
pushTraining <- push1$trainset
# extracting the Test Data
pushTest <- push1$testset
# Implementing the glm on the Training set
pushTraining.glm <- glm(Condition ~ Duration.of.Fixation +
Horizontal.Dispersion +
Vertical.Dispersion +
Velocity.Horizontal +
Velocity.Vertical,data = pushTraining,family = binomial())
# Saving the AIC value of each model into aicValue
aicValue <- rbind(aicValue,pushTraining.glm$aic)
# Predicting the values in the test data
predict_training_glm <- round(predict(training.GLM,
pushTest,
type = "response"))
# Measuring the accuracy.
cAccuracy <- accuracy(pushTest$Condition,
predict_training_glm,
threshold = .95)
# Saving the AUC value from each model into aucValue
aucValue <- rbind(aucValue,cAccuracy$AUC)
#===========================LASSO MODEL=============================
pushTraining.glm.lasso <- glm(Condition ~ Duration.of.Fixation+
Vertical.Dispersion,
data = pushTraining,family = binomial())
# Saving the AIC value of each model into aicValueLasso
aicValueLasso <- rbind(aicValueLasso,pushTraining.glm.lasso$aic)
# Predicting the values in the test data from the lasso model
predict_lasso_training_glm <- round(predict(pushTraining.glm.lasso,
pushTest,
type = "response"))
# Getting the accureacy
cAccuracyLasso <- accuracy(pushTest$Condition,
pushTraining.glm.lasso,
threshold = .95)
aucValueLasso <- rbind(aucValueLasso,cAccuracyLasso$AUC)
}
for(i in 200:1000){
splitdataWORK <- function(dataframe, seed=NULL){
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)*.80))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
# Entire Dataset
push1 <- splitdataWORK(eyeMovements_4,i)
# Extracting the Training Data
pushTraining <- push1$trainset
# extracting the Test Data
pushTest <- push1$testset
# Implementing the glm on the Training set
pushTraining.glm <- glm(Condition ~ Duration.of.Fixation +
Horizontal.Dispersion +
Vertical.Dispersion +
Velocity.Horizontal +
Velocity.Vertical,data = pushTraining,family = binomial())
# Saving the AIC value of each model into aicValue
aicValue <- rbind(aicValue,pushTraining.glm$aic)
# Predicting the values in the test data
predict_training_glm <- round(predict(training.GLM,
pushTest,
type = "response"))
# Measuring the accuracy.
cAccuracy <- accuracy(pushTest$Condition,
predict_training_glm,
threshold = .95)
# Saving the AUC value from each model into aucValue
aucValue <- rbind(aucValue,cAccuracy$AUC)
#===========================LASSO MODEL=============================
pushTraining.glm.lasso <- glm(Condition ~ Duration.of.Fixation+
Vertical.Dispersion,
data = pushTraining,family = binomial())
# Saving the AIC value of each model into aicValueLasso
aicValueLasso <- rbind(aicValueLasso,pushTraining.glm.lasso$aic)
# Predicting the values in the test data from the lasso model
predict_lasso_training_glm <- round(predict(pushTraining.glm.lasso,
pushTest,
type = "response"))
# Getting the accureacy
#   cAccuracyLasso <- accuracy(pushTest$Condition,
#                              pushTraining.glm.lasso,
#                              threshold = .95)
#   aucValueLasso <- rbind(aucValueLasso,cAccuracyLasso$AUC)
}
head(aicValue)
head(aucValue)
head(aicValueLasso)
head(aucValueLasso)
aucValueLasso <- c()
aucValueLasso
for(i in 200:1000){
splitdataWORK <- function(dataframe, seed=NULL){
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)*.80))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
# Entire Dataset
push1 <- splitdataWORK(eyeMovements_4,i)
# Extracting the Training Data
pushTraining <- push1$trainset
# extracting the Test Data
pushTest <- push1$testset
# Implementing the glm on the Training set
pushTraining.glm <- glm(Condition ~ Duration.of.Fixation +
Horizontal.Dispersion +
Vertical.Dispersion +
Velocity.Horizontal +
Velocity.Vertical,data = pushTraining,family = binomial())
# Saving the AIC value of each model into aicValue
aicValue <- rbind(aicValue,pushTraining.glm$aic)
# Predicting the values in the test data
predict_training_glm <- round(predict(training.GLM,
pushTest,
type = "response"))
# Measuring the accuracy.
cAccuracy <- accuracy(pushTest$Condition,
predict_training_glm,
threshold = .95)
# Saving the AUC value from each model into aucValue
aucValue <- rbind(aucValue,cAccuracy$AUC)
#===========================LASSO MODEL=============================
pushTraining.glm.lasso <- glm(Condition ~ Duration.of.Fixation+
Vertical.Dispersion,
data = pushTraining,family = binomial())
# Saving the AIC value of each model into aicValueLasso
aicValueLasso <- rbind(aicValueLasso,pushTraining.glm.lasso$aic)
# Predicting the values in the test data from the lasso model
predict_lasso_training_glm <- round(predict(pushTraining.glm.lasso,
pushTest,
type = "response"))
# Getting the accureacy
cAccuracyLasso <- accuracy(pushTest$Condition,
predict_lasso_training_glm,
threshold = .95)
# Saving the AUC value from each model into aucValueLasso
aucValueLasso <- rbind(aucValueLasso,cAccuracyLasso$AUC)
}
head(aicValue)
head(aucValue)
head(aicValueLasso)
head(aucValueLasso)
mean(aicValue)
mean(aicValue)
mean(aucValue)
mean(aicValueLasso)
mean(aucValueLasso)
setwd("~/Desktop/git_locals/")
setwd("~/StatisticsForBigData-/FinalDrafts/")
setwd("/Users/dylanrose/Desktop/git_locals/StatisticsForBigData-/FinalDrafts")
library(gdata)
library(SDMTools)
library(ROCR)
library(bestglm)
library(lars)
library(dplyr)
eyeMovements <- read.csv(file = "full_eyemovement_set.csv")
eyeMovements <- select(.data = eyeMovements, -(num_fixations))
eyeMovements <- rename(eyeMovements,
"Duration.of.Fixation" = mean_fix_dur,
"Horizontal.Dispersion" = disp_horz,
"Vertical.Dispersion" = disp_vert,
"Velocity.Horizontal" = peak_vel_horz,
"Velocity.Vertical" = peak_vel_vert,
"Condition" = condition,
"SubjectID" = subj_id,
"Trial.Number" = trial_num)
center_scale <- function(x) {
scale(x, scale = FALSE)
}
eyeMovements<- mutate(eyeMovements,
Duration.of.Fixation = center_scale(Duration.of.Fixation),
Horizontal.Dispersion = center_scale(Horizontal.Dispersion),
Vertical.Dispersion = center_scale(Vertical.Dispersion),
Velocity.Horizontal = center_scale(Velocity.Horizontal),
Velocity.Vertical = center_scale(Velocity.Vertical))
eyeMovements$Condition <- ifelse(eyeMovements$Condition == "random",0,1)
head(eyeMovements,n = 10)
eyeMovements_2 <- eyeMovements
eyeMovements_2 <- select(eyeMovements_2,-(SubjectID:Trial.Number))
head(eyeMovements_2)
eyeMovements_2Length <- nrow(eyeMovements_2)
eyeMovements_2Length
realLenth <-seq(1,eyeMovements_2Length,by = 2)
realLenth
Duration.of.Fixation <- c()
Horizontal.Dispersion <- c()
Vertical.Dispersion <- c()
Velocity.Horizontal <- c()
Velocity.Vertical <- c()
eyeMovements_3 <- data.frame("Condition"= eyeMovements_2$Condition[realLenth])
eyeMovements_3
for( i in realLenth){
Duration.of.Fixation <- c(Duration.of.Fixation,c(eyeMovements_2$Duration.of.Fixation[i] - eyeMovements_2$Duration.of.Fixation[i+1]))
Horizontal.Dispersion <- c(Horizontal.Dispersion,c(eyeMovements_2$Horizontal.Dispersion[i] - eyeMovements_2$Horizontal.Dispersion[i+1]))
Vertical.Dispersion <- c(Vertical.Dispersion,c(eyeMovements_2$Vertical.Dispersion[i] - eyeMovements_2$Vertical.Dispersion[i+1]))
Velocity.Horizontal <- c(Velocity.Horizontal,c(eyeMovements_2$Velocity.Horizontal[i] - eyeMovements_2$Velocity.Horizontal[i+1]))
Velocity.Vertical <- c(Velocity.Vertical,c(eyeMovements_2$Velocity.Vertical[i] - eyeMovements_2$Velocity.Vertical[i+1]))
}
eyeMovements_3$Duration.of.Fixation <- Duration.of.Fixation
eyeMovements_3$Horizontal.Dispersion <- Horizontal.Dispersion
eyeMovements_3$Vertical.Dispersion <- Vertical.Dispersion
eyeMovements_3$Velocity.Horizontal <- Velocity.Horizontal
eyeMovements_3$Velocity.Vertical <- Velocity.Vertical
write.csv(eyeMovements_3,file = "eyeMovement_3.csv",row.names = FALSE)
eyeMovements_3.GLM <- glm(Condition ~ Duration.of.Fixation +
Horizontal.Dispersion +
Vertical.Dispersion +
Velocity.Horizontal +
Velocity.Vertical,data = eyeMovements_3,family = binomial())
# Getting the Coefficients
eyeMovements_3.GLM$coefficients
# Getting the Residuals
eyeMovements_3.GLM$residuals
# Getting the Fitted values
eyeMovements_3.GLM$fitted.values
# Getting the Effects
eyeMovements_3.GLM$effects
# Saving the summary of the glm object
eyeMovements_3.GLM.Summary <- summary(eyeMovements_3.GLM)
eyeMovements_3.GLM.Summary
# Getting the AIC value of the model
eyeMovements_3.GLM$aic
eyeMovements_3.GLM$coefficients
library(corrgram)
corrgram(eyeMovements_4)
eyeMovements_4 <- eyeMovements_3[-c(79,214),]
corrgram(eyeMovements_4)
x<-seq(1:10)
y<-seq(1:10)
plot(x,y)
dev.off()
corrgram(eyeMovements_4)
plot(x,y)
eyeMovements <- read.csv(file = "full_eyemovement_set.csv")
head(eyeMovements)
