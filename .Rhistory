Velocity.Vertical,data = eyeTrainingScale,family = binomial())
lsa(training_glm)
source("LSA.R.txt")
lsa(training_glm)
predict_training_glm <- round(predict(training_glm,eyeTestScale,type = "response"))
predict_training_glm_continous <- predict(training_glm,eyeTestScale,type = "response")
confusion.matrix(eyeTestScale$Condition,predict_training_glm,threshold = .95)
pred_training <- prediction(predict_training_glm_continous,eyeTestScale$Condition)
performance_training <- performance(pred_training,"tpr","fpr")
performance_training
plot(performance_training)
lasso_model<-glm(Condition ~
Duration.of.Fixation +
Horizontal.Dispersion +
Vertical.Dispersion +
Velocity.Horizontal + ,data = eyeTrainingScale,family = binomial())
lasso_model<-glm(Condition ~
Duration.of.Fixation +
Horizontal.Dispersion +
Vertical.Dispersion +
Velocity.Horizontal ,data = eyeTrainingScale,family = binomial())
predict_lasso_glm<-round(predict(lasso_model,eyeTestScale,family=binomial()))
predict_lasso_glm<-predict(lasso_model,eyeTestScale,family=binomial())
confusion.matrix(eyeTestScale$Condition,predict_lasso_glm,threshold = .95)
lasso_prediction<-prediction(predict_lasso_glm,eyeTestScale$Condition)
lasso_performance<-performance(lasso_prediction,"tpr","fpr")
plot(lasso_performance)
install.packages("glmmLasso")
library(glmmLasso)
attach(eyeTrainingScale)
effectEyeMovements <- read.csv(file = "full_eyemovement_set.csv")
effectEyeMovements <- rename(effectEyeMovements,
"Fixation.Per.Trial" = num_fixations,
"Duration.of.Fixation" = mean_fix_dur,
"Horizontal.Dispersion" = disp_horz,
"Vertical.Dispersion" = disp_vert,
"Velocity.Horizontal" = peak_vel_horz,
"Velocity.Vertical" = peak_vel_vert,
"Condition" = condition,
"SubjectID" = subj_id,
"Trial.Number" = trial_num)
effectEyeMovements<- mutate(effectEyeMovements,
Fixation.Per.Trial = center_scale(Fixation.Per.Trial),
Duration.of.Fixation = center_scale(Duration.of.Fixation),
Horizontal.Dispersion = center_scale(Horizontal.Dispersion),
Vertical.Dispersion = center_scale(Vertical.Dispersion),
Velocity.Horizontal = center_scale(Velocity.Horizontal),
Velocity.Vertical = center_scale(Velocity.Vertical))
center_scale <- function(x) {
scale(x, scale = FALSE)
}
effectEyeMovements<- mutate(effectEyeMovements,
Fixation.Per.Trial = center_scale(Fixation.Per.Trial),
Duration.of.Fixation = center_scale(Duration.of.Fixation),
Horizontal.Dispersion = center_scale(Horizontal.Dispersion),
Vertical.Dispersion = center_scale(Vertical.Dispersion),
Velocity.Horizontal = center_scale(Velocity.Horizontal),
Velocity.Vertical = center_scale(Velocity.Vertical))
head(effectEyeMovements)
effectEyeMovements$Condition <- ifelse(effectEyeMovements$Condition == "random",0,1)
effectEyeWholeData <- splitdata(effectEyeMovements,123)
effectTrainingScale <- effectEyeWholeData$trainset
effectTestScale <- effectEyeWholeData$testset
glmm_lasso_test<-glmmLasso(Condition~Duration.of.Fixation+Horizontal.Dispersion+Vertical.Dispersion+Velocity.Horizontal+Velocity.Vertical,rnd=list(SubjectID=~1),data=effectTrainingScale)
glmm_lasso_test<-glmmLasso(Condition~Duration.of.Fixation+Horizontal.Dispersion+Vertical.Dispersion+Velocity.Horizontal+Velocity.Vertical,rnd=list(SubjectID=~1),data=effectTrainingScale,lambda=100,final.re=TRUE)
glmm_lasso_test<-glmmLasso(Condition~Duration.of.Fixation+Horizontal.Dispersion+Vertical.Dispersion+Velocity.Horizontal+Velocity.Vertical,rnd=list(SubjectID=~1),data=effectTrainingScale,lambda=100,final.re=TRUE,control = list(print.iter=TRUE,start=c(2,rep(0,29)),q.start=0.5))
glmm_lasso_test<-glmmLasso(Condition~Duration.of.Fixation+Horizontal.Dispersion+Vertical.Dispersion+Velocity.Horizontal+Velocity.Vertical,rnd=list(SubjectID=~1),family=binomial(link=log),data=effectTrainingScale,lambda=100,final.re=TRUE,control = list(print.iter=TRUE,start=c(2,rep(0,29)),q.start=0.5))
glmm_lasso_test<-glmmLasso(Condition~Duration.of.Fixation+Horizontal.Dispersion,rnd=list(SubjectID=~1),family=binomial(link=log),data=effectTrainingScale,lambda=100,final.re=TRUE,control = list(print.iter=TRUE,start=c(2,rep(0,29)),q.start=0.5))
glmm_lasso_test<-glmmLasso(Condition~Duration.of.Fixation,rnd=list(SubjectID=~1),family=binomial(link=log),data=effectTrainingScale,lambda=100,final.re=TRUE,control = list(print.iter=TRUE,start=c(2,rep(0,29)),q.start=0.5))
rm(list=ls())
# Reading the file from the full_eyemovement_set.csv file
effectEyeMovements <- read.csv(file = "full_eyemovement_set.csv")
head(effectEyeMovements)
# Renaming the Columns
effectEyeMovements <- rename(effectEyeMovements,
"Fixation.Per.Trial" = num_fixations,
"Duration.of.Fixation" = mean_fix_dur,
"Horizontal.Dispersion" = disp_horz,
"Vertical.Dispersion" = disp_vert,
"Velocity.Horizontal" = peak_vel_horz,
"Velocity.Vertical" = peak_vel_vert,
"Condition" = condition,
"SubjectID" = subj_id,
"Trial.Number" = trial_num)
head(effectEyeMovements)
# Center the variables this is needed for and create a new data frame
effectEyeMovements<- mutate(effectEyeMovements,
Fixation.Per.Trial = center_scale(Fixation.Per.Trial),
Duration.of.Fixation = center_scale(Duration.of.Fixation),
Horizontal.Dispersion = center_scale(Horizontal.Dispersion),
Vertical.Dispersion = center_scale(Vertical.Dispersion),
Velocity.Horizontal = center_scale(Velocity.Horizontal),
Velocity.Vertical = center_scale(Velocity.Vertical))
head(effectEyeMovements)
# Change the levels of the conditins as Random  = 0, Reading = 1
effectEyeMovements$Condition <- ifelse(effectEyeMovements$Condition == "random",0,1)
head(effectEyeMovements)
# Now the task is to divide the data set into training set and the test set
# which is done by the function defined previously in Cleaning.R
# Training 80% and 20% to test and from the function "splitdata"
# defined above
effectEyeWholeData <- splitdata(effectEyeMovements,123)
effectTrainingScale <- effectEyeWholeData$trainset
effectTestScale <- effectEyeWholeData$testset
effectEyeWholeData <- splitdata(effectEyeMovements,123)
library(gdata)
install.packages("SDMTools")
library(SDMTools)
library(ROCR)
library(bestglm)
install.packages("lars")
library(lars)
install.packages("SDMTools")
install.packages("lars")
install.packages("lars")
splitdata <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)*.80))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
center_scale <- function(x) {
scale(x, scale = FALSE)
}
effectEyeMovements<- mutate(effectEyeMovements,
Fixation.Per.Trial = center_scale(Fixation.Per.Trial),
Duration.of.Fixation = center_scale(Duration.of.Fixation),
Horizontal.Dispersion = center_scale(Horizontal.Dispersion),
Vertical.Dispersion = center_scale(Vertical.Dispersion),
Velocity.Horizontal = center_scale(Velocity.Horizontal),
Velocity.Vertical = center_scale(Velocity.Vertical))
head(effectEyeMovements)
effectEyeMovements$Condition <- ifelse(effectEyeMovements$Condition == "random",0,1)
head(effectEyeMovements)
effectEyeWholeData <- splitdata(effectEyeMovements,123)
effectTrainingScale <- effectEyeWholeData$trainset
effectTestScale <- effectEyeWholeData$testset
library(glmmLasso)
effectEyeMovements<-data.frame(effectEyeMovements)
View(effectTrainingScale)
effectEyeMovements<- mutate(effectEyeMovements,
Fixation.Per.Trial = unlist(center_scale(Fixation.Per.Trial)),
Duration.of.Fixation = unlist(center_scale(Duration.of.Fixation)),
Horizontal.Dispersion = unlist(center_scale(Horizontal.Dispersion)),
Vertical.Dispersion = unlist(center_scale(Vertical.Dispersion)),
Velocity.Horizontal = unlist(center_scale(Velocity.Horizontal)),
Velocity.Vertical = unlist(center_scale(Velocity.Vertical))
effectEyeMovements<- mutate(effectEyeMovements,
Fixation.Per.Trial = as.numeric(center_scale(Fixation.Per.Trial)),
Duration.of.Fixation = as.numeric(center_scale(Duration.of.Fixation)),
Horizontal.Dispersion = as.numeric(center_scale(Horizontal.Dispersion)),
Vertical.Dispersion = as.numeric(center_scale(Vertical.Dispersion)),
Velocity.Horizontal = as.numeric(center_scale(Velocity.Horizontal)),
Velocity.Vertical = as.numeric(center_scale(Velocity.Vertical))
effectEyeMovements<- mutate(effectEyeMovements,
Fixation.Per.Trial = as.numeric(center_scale(Fixation.Per.Trial)),
Duration.of.Fixation = as.numeric(center_scale(Duration.of.Fixation)),
Horizontal.Dispersion = as.numeric(center_scale(Horizontal.Dispersion)),
Vertical.Dispersion = as.numeric(center_scale(Vertical.Dispersion)),
Velocity.Horizontal = as.numeric(center_scale(Velocity.Horizontal)),
Velocity.Vertical = as.numeric(center_scale(Velocity.Vertical)))
effectEyeMovements<- mutate(effectEyeMovements,
Fixation.Per.Trial = unlist(center_scale(Fixation.Per.Trial)),
Duration.of.Fixation = unlist(center_scale(Duration.of.Fixation)),
Horizontal.Dispersion = unlist(center_scale(Horizontal.Dispersion)),
Vertical.Dispersion = unlist(center_scale(Vertical.Dispersion)),
Velocity.Horizontal = unlist(center_scale(Velocity.Horizontal)),
Velocity.Vertical = unlist(center_scale(Velocity.Vertical)))
effectEyeMovements<- mutate(effectEyeMovements,
Fixation.Per.Trial = as.numeric(center_scale(Fixation.Per.Trial)),
Duration.of.Fixation = as.numeric(center_scale(Duration.of.Fixation)),
Horizontal.Dispersion = as.numeric(center_scale(Horizontal.Dispersion)),
Vertical.Dispersion = as.numeric(center_scale(Vertical.Dispersion)),
Velocity.Horizontal = as.numeric(center_scale(Velocity.Horizontal)),
Velocity.Vertical = as.numeric(center_scale(Velocity.Vertical)))
rm(list=ls())
effectEyeMovements <- read.csv(file = "full_eyemovement_set.csv")
center_scale <- function(x) {
scale(x, scale = FALSE)
}
splitdata <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)*.80))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
effectEyeMovements<- mutate(effectEyeMovements,
Fixation.Per.Trial = center_scale(Fixation.Per.Trial),
Duration.of.Fixation = center_scale(Duration.of.Fixation),
Horizontal.Dispersion = center_scale(Horizontal.Dispersion),
Vertical.Dispersion = center_scale(Vertical.Dispersion),
Velocity.Horizontal = center_scale(Velocity.Horizontal),
Velocity.Vertical = center_scale(Velocity.Vertical))
effectEyeMovements <- rename(effectEyeMovements,
"Fixation.Per.Trial" = num_fixations,
"Duration.of.Fixation" = mean_fix_dur,
"Horizontal.Dispersion" = disp_horz,
"Vertical.Dispersion" = disp_vert,
"Velocity.Horizontal" = peak_vel_horz,
"Velocity.Vertical" = peak_vel_vert,
"Condition" = condition,
"SubjectID" = subj_id,
"Trial.Number" = trial_num)
effectEyeMovements<- mutate(effectEyeMovements,
Fixation.Per.Trial = center_scale(Fixation.Per.Trial),
Duration.of.Fixation = center_scale(Duration.of.Fixation),
Horizontal.Dispersion = center_scale(Horizontal.Dispersion),
Vertical.Dispersion = center_scale(Vertical.Dispersion),
Velocity.Horizontal = center_scale(Velocity.Horizontal),
Velocity.Vertical = center_scale(Velocity.Vertical))
effectEyeMovements$Condition <- ifelse(effectEyeMovements$Condition == "random",0,1)
effectEyeWholeData <- splitdata(effectEyeMovements,123)
effectTrainingScale <- effectEyeWholeData$trainset
effectTestScale <- effectEyeWholeData$testset
test<-Fixation.Per.Trial
test<-unlist(Fixation.Per.Trial)
test<-as.numeric(Fixation.Per.Trial)
test_eyes<-mutate(effectTrainingScale,as.numeric(Fixation.Per.Trial),as.numeric(Duration.of.Fixation),as.numeric(Horizontal.Dispersion),as.numeric(Vertical.Dispersion),as.numeric(Velocity.Horizontal),as.numeric(Velocity.Vertical))
fix_dur<-as.numeric(Duration.of.Fixation)
horz_disp<-as.numeric(Horizontal.Dispersion)
vert_disp<-as.numeric(Vertical.Dispersion)
vel_horz<-as.numeric(Velocity.Horizontal)
vel_vert<-as.numeric(Velocity.Vertical)
cond<-Condition
subj<-SubjectID
subj<-effectTrainingScale$SubjectID
test_frame<-data.frame(fix_dur,horz_disp,vert_disp,vel_horz,vel_vert,cond,subj)
library(glmmLasso)
glmm_lasso_test<-glmmLasso(cond~fix_dur+horz_disp+vert_disp+vel_horz+vel_vert,rnd=list(subj=~1),family=binomial(link=log),data=test_frame,lambda=10)
data(soccer)
rm(list=ls())
glm1 <- glmmLasso(points~transfer.spendings
+ ave.unfair.score + sold.out
+ tackles + ave.attend + ball.possession, rnd = list(team=~1),
family = poisson(link = log), data = soccer, lambda=400,
control = list(print.iter=TRUE,start=c(2,rep(0,29)),q.start=0.5))
data(soccer)
glm1 <- glmmLasso(points~transfer.spendings
+ ave.unfair.score + sold.out
+ tackles + ave.attend + ball.possession, rnd = list(team=~1),
family = poisson(link = log), data = soccer, lambda=400,
control = list(print.iter=TRUE,start=c(2,rep(0,29)),q.start=0.5))
soccer<-soccer[,-1]
data(soccer)
soccer<-soccer[-1,]
glm1 <- glmmLasso(points~transfer.spendings
+ ave.unfair.score + sold.out
+ tackles + ave.attend + ball.possession, rnd = list(team=~1),
family = poisson(link = log), data = soccer, lambda=400,
control = list(print.iter=TRUE,start=c(2,rep(0,29)),q.start=0.5))
?chol
soccer<-soccer[,-1]
glm1 <- glmmLasso(points~transfer.spendings
+ ave.unfair.score + sold.out
+ tackles + ave.attend + ball.possession, rnd = list(team=~1),
family = poisson(link = log), data = soccer, lambda=400,
control = list(print.iter=TRUE,start=c(2,rep(0,29)),q.start=0.5))
rm(list=ls())
center_scale <- function(x) {
scale(x, scale = FALSE)
}
splitdata <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)*.80))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
effectEyeMovements <- read.csv(file = "full_eyemovement_set.csv")
effectEyeMovements <- rename(effectEyeMovements,
"Fixation.Per.Trial" = num_fixations,
"Duration.of.Fixation" = mean_fix_dur,
"Horizontal.Dispersion" = disp_horz,
"Vertical.Dispersion" = disp_vert,
"Velocity.Horizontal" = peak_vel_horz,
"Velocity.Vertical" = peak_vel_vert,
"Condition" = condition,
"SubjectID" = subj_id,
"Trial.Number" = trial_num)
# Center the variables this is needed for and create a new data frame
effectEyeMovements<- mutate(effectEyeMovements,
Fixation.Per.Trial = center_scale(Fixation.Per.Trial),
Duration.of.Fixation = center_scale(Duration.of.Fixation),
Horizontal.Dispersion = center_scale(Horizontal.Dispersion),
Vertical.Dispersion = center_scale(Vertical.Dispersion),
Velocity.Horizontal = center_scale(Velocity.Horizontal),
Velocity.Vertical = center_scale(Velocity.Vertical))
effectEyeWholeData <- splitdata(effectEyeMovements,123)
effectTrainingScale <- effectEyeWholeData$trainset
effectTestScale <- effectEyeWholeData$testset
effectTrainingScale$SubjectID<-as.factor(effectTrainingScale$SubjectID)
glmm_lasso_test<-glmmLasso(Condition~Duration.of.Fixation+Horizontal.Dispersion+Vertical.Dispersion+Velocity.Horizontal+Velocity.Vertical,rnd=list(SubjectID=~1),family=binomial(link=log),data=effectTrainingScale)
glmm_lasso_test<-glmmLasso(Condition~Duration.of.Fixation+Horizontal.Dispersion+Vertical.Dispersion+Velocity.Horizontal+Velocity.Vertical,rnd=list(SubjectID=~1),lambda=10,family=binomial(link=log),data=effectTrainingScale)
effectTrainingScale$Duration.of.Fixation<-as.numeric(effectTrainingScale$Duration.of.Fixation)
effectTrainingScale$Fixation.Per.Trial<-as.numeric(effectTrainingScale$Fixation.Per.Trial)
effectTrainingScale$Horizontal.Dispersion<-as.numeric(effectTrainingScale$Horizontal.Dispersion)
effectTrainingScale$Vertical.Dispersion<-as.numeric(effectTrainingScale$Vertical.Dispersion)
effectTrainingScale$Velocity.Horizontal<-as.numeric(effectTrainingScale$Velocity.Horizontal)
effectTrainingScale$Velocity.Vertical<-as.numeric(effectTrainingScale$Velocity.Vertical)
glmm_lasso_test<-glmmLasso(Condition~Duration.of.Fixation+Horizontal.Dispersion+Vertical.Dispersion+Velocity.Horizontal+Velocity.Vertical,rnd=list(SubjectID=~1),family=binomial(link=log),data=effectTrainingScale)
effectTrainingScale$SubjectID<-as.numeric(effectTrainingScale$SubjectID)
glmm_lasso_test<-glmmLasso(Condition~Duration.of.Fixation+Horizontal.Dispersion+Vertical.Dispersion+Velocity.Horizontal+Velocity.Vertical,rnd=list(SubjectID=~1),family=binomial(link=log),data=effectTrainingScale)
effectTrainingScale$SubjectID<-as.factor(effectTrainingScale$SubjectID)
glmm_lasso_test<-glmmLasso(Condition~Duration.of.Fixation+Horizontal.Dispersion+Vertical.Dispersion+Velocity.Horizontal+Velocity.Vertical,rnd=list(SubjectID=~1),lambda=300,family=binomial(link=log),data=effectTrainingScale)
test_frame<-effectTrainingScale[!complete.cases(effectTrainingScale),]
glmm_lasso_test<-glmmLasso(Condition~Duration.of.Fixation+Horizontal.Dispersion+Vertical.Dispersion+Velocity.Horizontal+Velocity.Vertical,rnd=list(SubjectID=~1),lambda=300,family=binomial(link=log),data=test_frame)
library(corrgram)
corrgram(effectEyeMovements)
test_model<-glmer(Condition~Duration.of.Fixation+Horizontal.Dispersion+Vertical.Dispersion+Velocity.Horizontal+Velocity.Vertical+(1|Trial.Numer:SubjectID),data=effectTrainingScale,family = binomial,nAGQ=1)
test_model<-glmer(Condition~Duration.of.Fixation+Horizontal.Dispersion+Vertical.Dispersion+Velocity.Horizontal+Velocity.Vertical+(1|Trial.Number:SubjectID),data=effectTrainingScale,family = binomial,nAGQ=1)
summary(test_model)
predicted_test_model<-predict(test_model,effectTestScale,type="response")
effectTestScale$SubjectID<-as.factor(effectTestScale$SubjectID)
predicted_test_model<-predict(test_model,effectTestScale,type="response")
?predict
keep(test_model,sure=TRUE)
# Reading the file from the full_eyemovement_set.csv file
effectEyeMovements <- read.csv(file = "full_eyemovement_set.csv")
head(effectEyeMovements)
# Renaming the Columns
effectEyeMovements <- rename(effectEyeMovements,
"Fixation.Per.Trial" = num_fixations,
"Duration.of.Fixation" = mean_fix_dur,
"Horizontal.Dispersion" = disp_horz,
"Vertical.Dispersion" = disp_vert,
"Velocity.Horizontal" = peak_vel_horz,
"Velocity.Vertical" = peak_vel_vert,
"Condition" = condition,
"SubjectID" = subj_id,
"Trial.Number" = trial_num)
head(effectEyeMovements)
# Center the variables this is needed for and create a new data frame
effectEyeMovements<- mutate(effectEyeMovements,
Fixation.Per.Trial = center_scale(Fixation.Per.Trial),
Duration.of.Fixation = center_scale(Duration.of.Fixation),
Horizontal.Dispersion = center_scale(Horizontal.Dispersion),
Vertical.Dispersion = center_scale(Vertical.Dispersion),
Velocity.Horizontal = center_scale(Velocity.Horizontal),
Velocity.Vertical = center_scale(Velocity.Vertical))
head(effectEyeMovements)
# Change the levels of the conditins as Random  = 0, Reading = 1
effectEyeMovements$Condition <- ifelse(effectEyeMovements$Condition == "random",0,1)
head(effectEyeMovements)
# Now the task is to divide the data set into training set and the test set
# which is done by the function defined previously in Cleaning.R
# Training 80% and 20% to test and from the function "splitdata"
# defined above
effectEyeWholeData <- splitdata(effectEyeMovements,123)
effectTrainingScale <- effectEyeWholeData$trainset
effectTestScale <- effectEyeWholeData$testset
head(effectTrainingScale)
head(effectTestScale)
# Define a mean centering function:
center_scale <- function(x) {
scale(x, scale = FALSE)
}
splitdata <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)*.80))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
effectEyeMovements$Condition <- ifelse(effectEyeMovements$Condition == "random",0,1)
head(effectEyeMovements)
# Now the task is to divide the data set into training set and the test set
# which is done by the function defined previously in Cleaning.R
# Training 80% and 20% to test and from the function "splitdata"
# defined above
effectEyeWholeData <- splitdata(effectEyeMovements,123)
effectTrainingScale <- effectEyeWholeData$trainset
effectTestScale <- effectEyeWholeData$testset
predicted_test_model<-predict(test_model,effectTestScale,type="response")
keep(test_model,sure=TRUE)
full_eyemovement_set <- read.csv("~/Desktop/git_locals/StatisticsForBigData-/full_eyemovement_set.csv")
center_scale <- function(x) {
scale(x, scale = FALSE)
}
attach(full_eyemovement_set)
cent_num_fix<-center_scale(num_fixations)
cent_mean_fix<-center_scale(mean_fix_dur)
cent_disp_horz<-center_scale(disp_horz)
cent_disp_vert<-center_scale(disp_vert)
cent_peak_vel_horz<-center_scale(peak_vel_horz)
cent_peak_vel_vert<-center_scale(peak_vel_vert)
##Change the levels of condition
levels(condition)<-c(0,1)
##Change subjid to a factor
subj_id<-as.factor(subj_id)
trial_num<-trial_num
full_eyemovement_set_centered<-data.frame(cent_num_fix,cent_mean_fix,cent_disp_horz,cent_disp_vert,cent_peak_vel_horz,cent_peak_vel_vert,condition,subj_id,trial_num)
training_set<-full_eyemovement_set_centered[sample(nrow(full_eyemovement_set_centered),490),]
test_set<-full_eyemovement_set_centered[sample(nrow(full_eyemovement_set_centered),122),]
#A variable with classes adjusted to have "1" and "0" as values.
observed<-as.numeric(test_set$condition)-1
test_model<-glmer(condition~cent_mean_fix+cent_disp_horz+cent_disp_vert+cent_peak_vel_horz+cent_peak_vel_vert+(1|trial_num:subj_id),data=training_set,family=binomila,nAGQ=1)
test_model<-glmer(condition~cent_mean_fix+cent_disp_horz+cent_disp_vert+cent_peak_vel_horz+cent_peak_vel_vert+(1|trial_num:subj_id),data=training_set,family=binomial,nAGQ=1)
test_prediction<-predict(test_model,test_set,type="response")
rm(list=ls*)
rm(list=ls())
# Reading the file from the full_eyemovement_set.csv file
effectEyeMovements <- read.csv(file = "full_eyemovement_set.csv")
head(effectEyeMovements)
# Renaming the Columns
effectEyeMovements <- rename(effectEyeMovements,
"Fixation.Per.Trial" = num_fixations,
"Duration.of.Fixation" = mean_fix_dur,
"Horizontal.Dispersion" = disp_horz,
"Vertical.Dispersion" = disp_vert,
"Velocity.Horizontal" = peak_vel_horz,
"Velocity.Vertical" = peak_vel_vert,
"Condition" = condition,
"SubjectID" = subj_id,
"Trial.Number" = trial_num)
head(effectEyeMovements)
# Center the variables this is needed for and create a new data frame
effectEyeMovements<- mutate(effectEyeMovements,
Fixation.Per.Trial = center_scale(Fixation.Per.Trial),
Duration.of.Fixation = center_scale(Duration.of.Fixation),
Horizontal.Dispersion = center_scale(Horizontal.Dispersion),
Vertical.Dispersion = center_scale(Vertical.Dispersion),
Velocity.Horizontal = center_scale(Velocity.Horizontal),
Velocity.Vertical = center_scale(Velocity.Vertical))
head(effectEyeMovements)
# Change the levels of the conditins as Random  = 0, Reading = 1
effectEyeMovements$Condition <- ifelse(effectEyeMovements$Condition == "random",0,1)
head(effectEyeMovements)
# Now the task is to divide the data set into training set and the test set
# which is done by the function defined previously in Cleaning.R
# Training 80% and 20% to test and from the function "splitdata"
# defined above
effectEyeWholeData <- splitdata(effectEyeMovements,123)
effectTrainingScale <- effectEyeWholeData$trainset
effectTestScale <- effectEyeWholeData$testset
head(effectTrainingScale)
head(effectTestScale)
center_scale <- function(x) {
scale(x, scale = FALSE)
}
splitdata <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)*.80))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
# Reading the file from the full_eyemovement_set.csv file
effectEyeMovements <- read.csv(file = "full_eyemovement_set.csv")
head(effectEyeMovements)
# Renaming the Columns
effectEyeMovements <- rename(effectEyeMovements,
"Fixation.Per.Trial" = num_fixations,
"Duration.of.Fixation" = mean_fix_dur,
"Horizontal.Dispersion" = disp_horz,
"Vertical.Dispersion" = disp_vert,
"Velocity.Horizontal" = peak_vel_horz,
"Velocity.Vertical" = peak_vel_vert,
"Condition" = condition,
"SubjectID" = subj_id,
"Trial.Number" = trial_num)
head(effectEyeMovements)
# Center the variables this is needed for and create a new data frame
effectEyeMovements<- mutate(effectEyeMovements,
Fixation.Per.Trial = center_scale(Fixation.Per.Trial),
Duration.of.Fixation = center_scale(Duration.of.Fixation),
Horizontal.Dispersion = center_scale(Horizontal.Dispersion),
Vertical.Dispersion = center_scale(Vertical.Dispersion),
Velocity.Horizontal = center_scale(Velocity.Horizontal),
Velocity.Vertical = center_scale(Velocity.Vertical))
head(effectEyeMovements)
# Change the levels of the conditins as Random  = 0, Reading = 1
effectEyeMovements$Condition <- ifelse(effectEyeMovements$Condition == "random",0,1)
head(effectEyeMovements)
# Now the task is to divide the data set into training set and the test set
# which is done by the function defined previously in Cleaning.R
# Training 80% and 20% to test and from the function "splitdata"
# defined above
effectEyeWholeData <- splitdata(effectEyeMovements,123)
effectTrainingScale <- effectEyeWholeData$trainset
effectTestScale <- effectEyeWholeData$testset
effect_training_glmer <- glmer(Condition ~ Fixation.Per.Trial +
Duration.of.Fixation +
Horizontal.Dispersion +
Vertical.Dispersion +
Velocity.Horizontal+
(1 | Trial.Number : SubjectID),data = effectTrainingScale,family = binomial,
control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
effect_training_glmer <- glmer(Condition ~ Fixation.Per.Trial +
Duration.of.Fixation +
Horizontal.Dispersion +
Vertical.Dispersion +
Velocity.Horizontal+
(1 | Trial.Number : SubjectID),data = effectTrainingScale,family = binomial,
control = glmerControl(optimizer = "bobyqa"),
nAGQ = 1)
effect_training_glmer <- glmer(Condition ~
Duration.of.Fixation +
Horizontal.Dispersion +
Vertical.Dispersion +
Velocity.Horizontal+
(1 | Trial.Number : SubjectID),data = effectTrainingScale,family = binomial,
control = glmerControl(optimizer = "bobyqa"),
nAGQ = 1)
test_predictions<-predict(effect_training_glmer,effectTestScale,type="response")
