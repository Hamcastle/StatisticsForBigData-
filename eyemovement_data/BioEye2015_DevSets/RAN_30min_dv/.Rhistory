names(test)
test$model
predict(test)
standardized_regression<-function(data_point,a,b){
y_hat<-a+(data_point*b)
return(y_hat)
}
predicted_standardized_values<-(x,standardized_regression,a=a,b=b)
standardized_regression<-function(data_point,a,b){
y_hat<-a+(data_point*b)
return(y_hat)
}
predicted_standardized_values<-lapply(x,standardized_regression,a=a,b=b)
b<-correlation_r*(sd(y)/sd(x))
a<-mean(y)-(b*mean(x))
correlation_r<-correlation_value(ZxZy)
b<-correlation_r*(sd(y)/sd(x))
a<-mean(y)-(b*mean(x))
predicted_standardized_values<-lapply(x,standardized_regression,a=a,b=b)
predicted_standardized_values<-unlist(lapply(x,standardized_regression,a=a,b=b))
predicted_standardized_values
predict(test)
sd(y)/sd(x)
sd(Zy)/sd(Zx)
rm(list=ls())
directory.dummy <- "/Users/Dylan/Desktop/git_locals/StatisticsForBigData-/eyemovement_data/BioEye2015_DevSets/RAN_30min_dv"
files_list<-list.files(directory.dummy,full.names=TRUE)
data_load_and_cleanup<-function(text_file){
data <- data.frame(read.table(text_file,header = TRUE,fill = TRUE))
data <- data[c(-5,-6,-7,-8,-9,-10)]
}
test<-files_list[1]
data_load_and_cleanup(test)
data_load_and_cleanup<-function(text_file){
data <- data.frame(read.table(text_file,header = TRUE,fill = TRUE))
data <- data[c(-5,-6,-7,-8,-9,-10)]
return(data)
}
test_ou<-data_load_and_cleanup(test)
View(test_ou)
#Define a formula to convert degrees of visual angle to pixels.
#This formula will return a value which is the number of pixels away
#from the center of the display, which will then need to be adjusted using the second formula in this script.
pixel_conversion_formula<-function(data){
#Define variables needed for the calculation:
d=55 #Distance between viewers and monitor in cm. Don't modify this.
h=297 #Monitor height in cm. Don't modify this.
r=1050 # Vertical resolution of the monitor. Don't modify this.
#Calculate the number of pixels per degree of visual angle:
deg_per_pix<-deg(atan2(.5*h,d)/(.5*r))
#Calculate the size of data object in pixels instead of degrees
size_in_pix<-data/deg_per_pix
return(size_in_pix)
}
#Takes pairs of x & y pixel values and shifts their origins to the upper
#left hand corner of the monitor. Works by adding a constant to the pixel coordinate value for each dimension that re-centers them with respect to the upper-left corner of the display treated as the origin (0,0).
convert_to_origin_formula_x <- function(x){
original_horizontal_coordinate<-840 # The value of the pixel at the horizontal locaiton of the original origin for this data. Don't modify this.
con_hori_crd<-x+original_horizontal_coordinate #Adds the re-centering adjustment to the horizontal value in the input tuple.
return(con_hori_crd) # Generate a tuple of converted coordinate values.
}
convert_to_origin_formula_y <- function(y){
original_vertical_coordinate<-525 # The value of the pixel at the vertical location of the original origin for this data. Don't modify this.
con_verti_crd<-y+original_vertical_coordinate #Adds the re-centering adjustment to the vertical value in the input tuple.
return(con_verti_crd) # Generate a tuple of converted coordinate values.
}
coordinate_transformation_origin_recentering<-function(data_frame){
pixel_terms_x <- lapply(data_frame$x_degree,pixel_conversion_formula)
pixel_terms_y <- lapply(data_frame$y_degree,pixel_conversion_formula)
recentered_x <- lapply(pixel_terms_x,convert_to_origin_formula_x)
recentered_y <- lapply(pixel_terms_y,convert_to_origin_formula_y)
}
#Define a function that takes a text file as input and drops unnecessary columns, and renames
#columns of interest. Adds these values to new data frame and returns it.
data_load_and_cleanup<-function(text_file){
data <- data.frame(read.table(text_file,header = TRUE,fill = TRUE))
data <- data[c(-5,-6,-7,-8,-9,-10)]
colnames(data) <- c("sample","x_degree","y_degree","validity")
return(data)
}
test<-data_load_and_cleanup(files_list[2])
rm(test_ou)
test_out<-coordinate_transformation_origin_recentering(test)
#A wrapper for the conversion and re-centering formulas using APPLY functions for speed
coordinate_transformation_origin_recentering<-function(data_frame){
pixel_terms_x <- lapply(data_frame$x_degree,pixel_conversion_formula)
pixel_terms_y <- lapply(data_frame$y_degree,pixel_conversion_formula)
recentered_x <- lapply(pixel_terms_x,convert_to_origin_formula_x)
recentered_y <- lapply(pixel_terms_y,convert_to_origin_formula_y)
output<-data.frame(cbind(data_frame$sample,recentered_x,recentered_y,data_frame$validity))
}
#A wrapper for the conversion and re-centering formulas using APPLY functions for speed
coordinate_transformation_origin_recentering<-function(data_frame){
pixel_terms_x <- lapply(data_frame$x_degree,pixel_conversion_formula)
pixel_terms_y <- lapply(data_frame$y_degree,pixel_conversion_formula)
recentered_x <- lapply(pixel_terms_x,convert_to_origin_formula_x)
recentered_y <- lapply(pixel_terms_y,convert_to_origin_formula_y)
output<-data.frame(cbind(data_frame$sample,recentered_x,recentered_y,data_frame$validity))
return(output)
}
test_out<-coordinate_transformation_origin_recentering(test)
coordinate_transformation_origin_recentering<-function(data_frame){
pixel_terms_x <- unlist(lapply(data_frame$x_degree,pixel_conversion_formula))
pixel_terms_y <- unlist(lapply(data_frame$y_degree,pixel_conversion_formula))
recentered_x <- unlist(lapply(pixel_terms_x,convert_to_origin_formula_x))
recentered_y <- unlist(lapply(pixel_terms_y,convert_to_origin_formula_y))
output<-data.frame(cbind(data_frame$sample,recentered_x,recentered_y,data_frame$validity))
return(output)
}
test_out<-coordinate_transformation_origin_recentering(test)
#A wrapper for the conversion and re-centering formulas using APPLY functions for speed
coordinate_transformation_origin_recentering<-function(data_frame){
pixel_terms_x <- unlist(lapply(data_frame$x_degree,pixel_conversion_formula))
pixel_terms_y <- unlist(lapply(data_frame$y_degree,pixel_conversion_formula))
recentered_x <- unlist(lapply(pixel_terms_x,convert_to_origin_formula_x))
recentered_y <- unlist(lapply(pixel_terms_y,convert_to_origin_formula_y))
output<-data.frame(cbind(data_frame$sample,recentered_x,recentered_y,data_frame$validity))
colnames(output)<-c("sample","x","y","validity")
return(output)
}
test_out<-coordinate_transformation_origin_recentering(test)
library(saccades)
data(samples)
head(samples)
#A wrapper for the conversion and re-centering formulas using APPLY functions for speed
coordinate_transformation_origin_recentering<-function(data_frame){
pixel_terms_x <- unlist(lapply(data_frame$x_degree,pixel_conversion_formula))
pixel_terms_y <- unlist(lapply(data_frame$y_degree,pixel_conversion_formula))
recentered_x <- unlist(lapply(pixel_terms_x,convert_to_origin_formula_x))
recentered_y <- unlist(lapply(pixel_terms_y,convert_to_origin_formula_y))
output<-data.frame(cbind(data_frame$sample,recentered_x,recentered_y,data_frame$validity))
colnames(output)<-c("time","x","y","validity")
return(output)
}
#A wrapper for the conversion and re-centering formulas using APPLY functions for speed
coordinate_transformation_origin_recentering<-function(data_frame){
pixel_terms_x <- unlist(lapply(data_frame$x_degree,pixel_conversion_formula))
pixel_terms_y <- unlist(lapply(data_frame$y_degree,pixel_conversion_formula))
recentered_x <- unlist(lapply(pixel_terms_x,convert_to_origin_formula_x))
recentered_y <- unlist(lapply(pixel_terms_y,convert_to_origin_formula_y))
#Generate a "trial" column (a list of 1's given the design of our analyses to this point)
trial<-unlist(rep(1,length(recentered_x)))
output<-data.frame(cbind(data_frame$sample,recentered_x,recentered_y,trial))
colnames(output)<-c("time","x","y","trial")
return(output)
}
test_out<-coordinate_transformation_origin_recentering(test)
View(test)
#A wrapper for the conversion and re-centering formulas using APPLY functions for speed
coordinate_transformation_origin_recentering<-function(data_frame){
pixel_terms_x <- unlist(lapply(data_frame$x_degree,pixel_conversion_formula))
pixel_terms_y <- unlist(lapply(data_frame$y_degree,pixel_conversion_formula))
recentered_x <- unlist(lapply(pixel_terms_x,convert_to_origin_formula_x))
recentered_y <- unlist(lapply(pixel_terms_y,convert_to_origin_formula_y))
#Generate a "trial" column (a list of 1's given the design of our analyses to this point)
trial<-as.factor(unlist(rep(1,length(recentered_x))))
output<-data.frame(cbind(data_frame$sample,recentered_x,recentered_y,trial))
colnames(output)<-c("time","x","y","trial")
return(output)
}
View(test)
test_out<-coordinate_transformation_origin_recentering(test)
View(test_out)
trial<-test_out$trial
test_out_2<-as.factor(trial)
file_name<-files_list[3]
strsplit(file_name,"_")
test_out_4strsplit(file_name,"_")
test_out_4<-strsplit(file_name,"_")
test_out_4[1]
test_out_4[[1]]
bees<-unlist(test_out_4)
bees[1]
bees[2]
bees[3]
bees[4]
bees[5]
bees[6]
bees[7]
bees[8]
bees[8](1:2)
bees[8](1)
substr(bees[8],1,2)
substr(bees[8],1,1)
cd(directory.dummy)
setwd(directory.dummy)
pwd
getwd()
files_list<-list.files(directory.dummy,full.names=TRUE)]
files_list<-list.files(directory.dummy,full.names=TRUE)
trial_information[subject,trial_num]<-function(text_file){
split_name <- unlist(strsplit(text_file,"_"))
subject <- split_name[7]
trial_num <- substr(split_name[8],1,1)
}
trial_information[subject,trial_num]<-function(text_file){
split_name <- unlist(strsplit(text_file,"_"))
subject <- split_name[7]
trial_num <- substr(split_name[8],1,1)
}
list[subject,trial_num]<-function(text_file){
split_name <- unlist(strsplit(text_file,"_"))
subject <- split_name[7]
trial_num <- substr(split_name[8],1,1)
}
list[subject,trial_num]<-function(text_file){
split_name <- unlist(strsplit(text_file,"_"))
subject <- split_name[7]
trial_num <- substr(split_name[8],1,1)
return(subject)
return(trial_num)
}
subject_information<-function(text_file){
split_name <- unlist(strsplit(text_file,"_"))
subject <- split_name[7]
trial_num <- substr(split_name[8],1,1)
subject_trial_info<-c(subject,trial_num)
return(subject_trial_info)
}
#A wrapper function that calls all functions defined to this point on a single text file.
data_preprocessing_wrapper<-function(text_file){
subject_trial_info<-subject_information(text_file)
cleaned_data<-data_load_and_cleanup(text_file)
cleaned_transformed_data<-coordinate_transformation_origin_recentering(cleaned_data)
return(cleaned_transformed_data)
}
test_out_5<-data_preprocessing_wrapper(file_name)
system.time(data_preprocessing_wrapper(file_name))
eyemovement_wrapper<-function(text_file){
subject_trial_info<-subject_information(text_file)
cleaned_data<-data_load_and_cleanup(text_file)
cleaned_transformed_data<-coordinate_transformation_origin_recentering(cleaned_data)
fixations<-detect.fixations(cleaned_transformed_data)
return(fixations)
}
test<-eyemovement_wrapper(file_name)
fixations<-detect.fixations(samples,lambda=15)
data(samples)
fixations<-detect.fixations(samples,lambda=15)
library(saccades)
install.packages("saccades")
install.packages("saccades")
install.packages("saccades")
data(samples)
test<-detect.fixations(samples)
library(saccades)
test<-detect.fixations(samples)
test
head(test)
test_out_6<-detect.fixations(test_out_5)
head(test_out_6)
rm(list=ls())
directory.dummy <- "/Users/Dylan/Desktop/git_locals/StatisticsForBigData-/eyemovement_data/BioEye2015_DevSets/RAN_30min_dv"
files_list<-list.files(directory.dummy,full.names=TRUE)
# This is the path of the files in the system
# This value will change depending upon system to system.
#directory.dummy <- "/Users/mavezsinghdabas/StatisticsForBigData-/eyemovement_data/BioEye2015_DevSets/RAN_30min_dv"
#On DR's system:
directory.dummy <- "/Users/Dylan/Desktop/git_locals/StatisticsForBigData-/eyemovement_data/BioEye2015_DevSets/RAN_30min_dv"
#Get all the names in the data folder
files_list<-list.files(directory.dummy,full.names=TRUE)
#Define a function to parse the name of text files of data and return subject/trial/condition information
#from the filename.
subject_information<-function(text_file){
split_name <- unlist(strsplit(text_file,"_"))
subject <- split_name[7]
trial_num <- substr(split_name[8],1,1)
subject_trial_info<-c(subject,trial_num)
return(subject_trial_info)
}
#Define a function that takes a text file as input and drops unnecessary columns, and renames
#columns of interest. Adds these values to new data frame and returns it.
data_load_and_cleanup<-function(text_file){
data <- data.frame(read.table(text_file,header = TRUE,fill = TRUE))
data <- data[c(-5,-6,-7,-8,-9,-10)]
colnames(data) <- c("sample","x_degree","y_degree","validity")
return(data)
}
#Define a formula to convert degrees of visual angle to pixels.
#This formula will return a value which is the number of pixels away
#from the center of the display, which will then need to be adjusted using the second formula in this script.
pixel_conversion_formula<-function(data){
#Define variables needed for the calculation:
d=55 #Distance between viewers and monitor in cm. Don't modify this.
h=297 #Monitor height in cm. Don't modify this.
r=1050 # Vertical resolution of the monitor. Don't modify this.
#Calculate the number of pixels per degree of visual angle:
deg_per_pix<-deg(atan2(.5*h,d)/(.5*r))
#Calculate the size of data object in pixels instead of degrees
size_in_pix<-data/deg_per_pix
return(size_in_pix)
}
#Takes pairs of x & y pixel values and shifts their origins to the upper
#left hand corner of the monitor. Works by adding a constant to the pixel coordinate value for each dimension that re-centers them with respect to the upper-left corner of the display treated as the origin (0,0).
convert_to_origin_formula_x <- function(x){
original_horizontal_coordinate<-840 # The value of the pixel at the horizontal locaiton of the original origin for this data. Don't modify this.
con_hori_crd<-x+original_horizontal_coordinate #Adds the re-centering adjustment to the horizontal value in the input tuple.
return(con_hori_crd) # Generate a tuple of converted coordinate values.
}
convert_to_origin_formula_y <- function(y){
original_vertical_coordinate<-525 # The value of the pixel at the vertical location of the original origin for this data. Don't modify this.
con_verti_crd<-y+original_vertical_coordinate #Adds the re-centering adjustment to the vertical value in the input tuple.
return(con_verti_crd) # Generate a tuple of converted coordinate values.
}
#A wrapper for the conversion and re-centering formulas using APPLY functions for speed
coordinate_transformation_origin_recentering<-function(data_frame){
pixel_terms_x <- unlist(lapply(data_frame$x_degree,pixel_conversion_formula))
pixel_terms_y <- unlist(lapply(data_frame$y_degree,pixel_conversion_formula))
recentered_x <- unlist(lapply(pixel_terms_x,convert_to_origin_formula_x))
recentered_y <- unlist(lapply(pixel_terms_y,convert_to_origin_formula_y))
#Generate a "trial" column (a list of 1's given the design of our analyses to this point)
trial<-unlist(rep(1,length(recentered_x)))
trial<-as.factor(trial)
output<-data.frame(cbind(data_frame$sample,recentered_x,recentered_y,trial))
colnames(output)<-c("time","x","y","trial")
return(output)
}
#A wrapper function that calls all functions defined to this point on a single text file and returns eye movement data
eyemovement_wrapper<-function(text_file){
subject_trial_info<-subject_information(text_file)
cleaned_data<-data_load_and_cleanup(text_file)
cleaned_transformed_data<-coordinate_transformation_origin_recentering(cleaned_data)
fixations<-detect.fixations(cleaned_transformed_data)
return(fixations)
}
test_out<-eyemovement_wrapper(files_list[1])
install.packages("CircStats")
library(CircStats)
test_out<-eyemovement_wrapper(files_list[1])
View(test_out)
#Define a function that will parse a table of eye movement position data and identify saccades.
detect.saccades <- function(samples, lambda, smooth.saccades) {
# Calculate horizontal and vertical velocities:
vx <- stats::filter(samples$x, -1:1/2)
vy <- stats::filter(samples$y, -1:1/2)
# We don't want NAs, as they make our life difficult later
# on. Therefore, fill in missing values:
vx[1] <- vx[2]
vy[1] <- vy[2]
vx[length(vx)] <- vx[length(vx)-1]
vy[length(vy)] <- vy[length(vy)-1]
msdx <- sqrt(median(vx**2, na.rm=T) - median(vx, na.rm=T)**2)
msdy <- sqrt(median(vy**2, na.rm=T) - median(vy, na.rm=T)**2)
radiusx <- msdx * lambda
radiusy <- msdy * lambda
sacc <- ((vx/radiusx)**2 + (vy/radiusy)**2) > 1
if (smooth.saccades) {
sacc <- stats::filter(sacc, rep(1/3, 3))
sacc <- as.logical(round(sacc))
}
samples$saccade <- ifelse(is.na(sacc), F, sacc)
samples$vx <- vx
samples$vy <- vy
samples
}
preprocessing_wrapper<-function(text_file){
subject_trial_info<-subject_information(text_file)
cleaned_data<-data_load_and_cleanup(text_file)
cleaned_transformed_data<-coordinate_transformation_origin_recentering(cleaned_data)
return(cleaned_transformed_data)
}
test_data<-preprocessing_wrapper(files_list[[2]])
saccade_data<-detect.saccades(test_data)
saccade_data<-detect.saccades(test_data,lambda=15)
saccade_data<-detect.saccades(test_data,lambda=15,smooth.saccades=FALSE)
#Takes cleaned/pre-processed data and returns eye movement data sets
eyemovement_wrapper<-function(cleaned_transformed_data){
fixation_data<-detect.fixations(cleaned_transformed_data)
saccade_data<-detect.saccades(cleaned_transformed_data,lambda=15,smooth.saccades = FALSE)
return(list(fixation_data,saccade_data))
}
keep(test_data,sure=TRUE)
library(gdata)
keep(test_data,sure=TRUE)
#On DR's system:
directory.dummy <- "/Users/Dylan/Desktop/git_locals/StatisticsForBigData-/eyemovement_data/BioEye2015_DevSets/RAN_30min_dv"
#Get all the names in the data folder
files_list<-list.files(directory.dummy,full.names=TRUE)
#Define a function to parse the name of text files of data and return subject/trial/condition information
#from the filename.
subject_information<-function(text_file){
split_name <- unlist(strsplit(text_file,"_"))
subject <- split_name[7]
trial_num <- substr(split_name[8],1,1)
subject_trial_info<-c(subject,trial_num)
return(subject_trial_info)
}
#Define a function that will parse a table of eye movement position data and identify saccades.
detect.saccades <- function(samples, lambda, smooth.saccades) {
# Calculate horizontal and vertical velocities:
vx <- stats::filter(samples$x, -1:1/2)
vy <- stats::filter(samples$y, -1:1/2)
# We don't want NAs, as they make our life difficult later
# on. Therefore, fill in missing values:
vx[1] <- vx[2]
vy[1] <- vy[2]
vx[length(vx)] <- vx[length(vx)-1]
vy[length(vy)] <- vy[length(vy)-1]
msdx <- sqrt(median(vx**2, na.rm=T) - median(vx, na.rm=T)**2)
msdy <- sqrt(median(vy**2, na.rm=T) - median(vy, na.rm=T)**2)
radiusx <- msdx * lambda
radiusy <- msdy * lambda
sacc <- ((vx/radiusx)**2 + (vy/radiusy)**2) > 1
if (smooth.saccades) {
sacc <- stats::filter(sacc, rep(1/3, 3))
sacc <- as.logical(round(sacc))
}
samples$saccade <- ifelse(is.na(sacc), F, sacc)
samples$vx <- vx
samples$vy <- vy
samples
}
#Define a function that takes a text file as input and drops unnecessary columns, and renames
#columns of interest. Adds these values to new data frame and returns it.
data_load_and_cleanup<-function(text_file){
data <- data.frame(read.table(text_file,header = TRUE,fill = TRUE))
data <- data[c(-5,-6,-7,-8,-9,-10)]
colnames(data) <- c("sample","x_degree","y_degree","validity")
return(data)
}
#Define a formula to convert degrees of visual angle to pixels.
#This formula will return a value which is the number of pixels away
#from the center of the display, which will then need to be adjusted using the second formula in this script.
pixel_conversion_formula<-function(data){
#Define variables needed for the calculation:
d=55 #Distance between viewers and monitor in cm. Don't modify this.
h=297 #Monitor height in cm. Don't modify this.
r=1050 # Vertical resolution of the monitor. Don't modify this.
#Calculate the number of pixels per degree of visual angle:
deg_per_pix<-deg(atan2(.5*h,d)/(.5*r))
#Calculate the size of data object in pixels instead of degrees
size_in_pix<-data/deg_per_pix
return(size_in_pix)
}
#Takes pairs of x & y pixel values and shifts their origins to the upper
#left hand corner of the monitor. Works by adding a constant to the pixel coordinate value for each dimension that re-centers them with respect to the upper-left corner of the display treated as the origin (0,0).
convert_to_origin_formula_x <- function(x){
original_horizontal_coordinate<-840 # The value of the pixel at the horizontal locaiton of the original origin for this data. Don't modify this.
con_hori_crd<-x+original_horizontal_coordinate #Adds the re-centering adjustment to the horizontal value in the input tuple.
return(con_hori_crd) # Generate a tuple of converted coordinate values.
}
convert_to_origin_formula_y <- function(y){
original_vertical_coordinate<-525 # The value of the pixel at the vertical location of the original origin for this data. Don't modify this.
con_verti_crd<-y+original_vertical_coordinate #Adds the re-centering adjustment to the vertical value in the input tuple.
return(con_verti_crd) # Generate a tuple of converted coordinate values.
}
#A wrapper for the conversion and re-centering formulas using APPLY functions for speed
coordinate_transformation_origin_recentering<-function(data_frame){
pixel_terms_x <- unlist(lapply(data_frame$x_degree,pixel_conversion_formula))
pixel_terms_y <- unlist(lapply(data_frame$y_degree,pixel_conversion_formula))
recentered_x <- unlist(lapply(pixel_terms_x,convert_to_origin_formula_x))
recentered_y <- unlist(lapply(pixel_terms_y,convert_to_origin_formula_y))
#Generate a "trial" column (a list of 1's given the design of our analyses to this point)
trial<-unlist(rep(1,length(recentered_x)))
trial<-as.factor(trial)
output<-data.frame(cbind(data_frame$sample,recentered_x,recentered_y,trial))
colnames(output)<-c("time","x","y","trial")
return(output)
}
#A wrapper function that calls all functions defined to this point on a single text file and returns eye movement data
preprocessing_wrapper<-function(text_file){
subject_trial_info<-subject_information(text_file)
cleaned_data<-data_load_and_cleanup(text_file)
cleaned_transformed_data<-coordinate_transformation_origin_recentering(cleaned_data)
return(cleaned_transformed_data)
}
#Takes cleaned/pre-processed data and returns eye movement data sets
eyemovement_wrapper<-function(cleaned_transformed_data){
fixation_data<-detect.fixations(cleaned_transformed_data)
saccade_data<-detect.saccades(cleaned_transformed_data,lambda=15,smooth.saccades = FALSE)
return(list(fixation_data,saccade_data))
}
test_out<-eyemovement_wrapper(test_data)
head(test_out$fixations)
test_out$fixations
test_out$fixation_data
names(test_out)
test_out$fixation_data
test_out_unlisted<-unlist(test_out)
test_out[[2]]
fixations<-test_out[[1]]
saccades<-test_out[[2]]
library(dplyr)
test_saccades<-filter(saccades,saccade="TRUE")
test_saccades<-select(saccades,saccade="TRUE")
test_saccades<-select(saccades,saccade=="TRUE")
test_saccades<-select(saccades,saccade=="FALSE")
test_saccades<-filter(saccades,saccade=="FALSE")
test_saccades$vx<-as.numeric(test_saccades$vx)
eyemovement_wrapper<-function(cleaned_transformed_data){
fixation_data<-detect.fixations(cleaned_transformed_data)
saccade_data<-detect.saccades(cleaned_transformed_data,lambda=15,smooth.saccades = FALSE)
return(list(fixation_data,saccade_data))
}
final_wrapper<-function(text_file){
subject_info<-subject_information(text_file)
cleaned_transformed_data<-preprocessing_wrapper(text_file)
eyemovement_data<-eyemovement_wrapper(cleaned_transformed_data)
}
final_wrapper<-function(text_file){
subject_info<-subject_information(text_file)
cleaned_transformed_data<-preprocessing_wrapper(text_file)
eyemovement_data<-eyemovement_wrapper(cleaned_transformed_data)
output<-list(subject_info,eyemovement_data)
}
output<-lapply(file_list,final_wrapper)
output<-lapply(files_list,final_wrapper)
files_list<-list.files(directory.dummy,full.names=TRUE)
list(files_list)
#Install needed libraries:
files_list<-list(files_list)
output<-lapply(files_list,final_wrapper)
